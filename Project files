
TrafficTelligence/
│
├── data/
│   └── traffic_data.csv
├── models/
│   └── model.pkl
├── src/
│   ├── preprocess.py
│   ├── train.py
│   ├── evaluate.py
│   └── predict.py
├── main.py
└── requirements.txt
from src import preprocess, train, evaluate

# Load and preprocess data
data = preprocess.load_and_clean_data("data/traffic_data.csv")

# Train model
model, X_test, y_test = train.train_model(data)

# Evaluate model
evaluate.evaluate_model(model, X_test, y_test)
import pandas as pd
from sklearn.model_selection import train_test_split

def load_and_clean_data(filepath):
    df = pd.read_csv(filepath)
    df.dropna(inplace=True)
    
    # Convert timestamps, extract features
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['hour'] = df['timestamp'].dt.hour
    df['day_of_week'] = df['timestamp'].dt.dayofweek

    # Feature selection
    features = df[['hour', 'day_of_week', 'weather', 'road_type']]
    features = pd.get_dummies(features)
    labels = df['vehicle_count']
    
    return train_test_split(features, labels, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor
import joblib

def train_model(data):
    X_train, X_test, y_train, y_test = data
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Save the model
    joblib.dump(model, "models/model.pkl")
    
    return model, X_test, y_test
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    r2 = r2_score(y_test, predictions)

    print(f"RMSE: {rmse:.2f}")
    print(f"R^2 Score: {r2:.2f}")
pandas
scikit-learn
joblib
